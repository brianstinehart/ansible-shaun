---
- name: Deploy VM in AWS
  hosts: localhost
  vars:
    base_vm_name: "Ansibledemo"
    ec2_vpc_id: "{{ survey_ec2_vpc_id }}"
    ec2_region: "{{ survey_ec2_region }}"
    ec2_vpc_subnet_id: "{{ survey_vpc_subnet_id }}"
    #user_count: "1"
    ec2_instance_type: "t2.medium"
    ec2_ami_image: "ami-0be7afce90ae33ee9" #Microsoft Windows Server 2022 Base
    ptr_zone_cidr: "{{ survey_ptr_zone_cidr }}"
    security_group: Ansibledemo-windowssg
    aws_key_name: "AnsibleDemoKey"
  tasks:
  
  ################### Private key ###################
    - name: Delete Key Pair {{ aws_key_name  }}
      ec2_key:
        name: "{{ aws_key_name }}"
        region: "{{ ec2_region }}"
        state: absent
      register: remove_key
      ignore_errors: true
    
    - name: Create key pair {{ aws_key_name  }}
      ec2_key:
        name: "{{ aws_key_name }}"
        region: "{{ ec2_region }}"
      register: create_key
      
    - name: Save the private key
      copy:
        content: "{{ create_key.key.private_key }}"
        dest: "/root/{{ aws_key_name }}-VM-private.pem"
        mode: '0400'
      when: create_key.changed
      
################### Build Instances ###################      
    - name: Windows - Launch instance 1
      ec2:
        key_name: "{{ aws_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami_image }}"
        wait: yes
        group: "{{ security_group }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        assign_public_ip: yes
        region: "{{ ec2_region }}"
        instance_tags:
          Name: "{{ base_vm_name }}"
          os_type: windows
        user_data: "{{ lookup('template', 'win_ec2_user_data.j2', template_vars=dict(vm_name=base_vm_name )) }}"
      with_sequence: count=1
      register: windows_jobs
      async: 7200
      poll: 0
       
################### Wait for Jobs ###################
    - name: Wait for windows instance creation to complete
      async_status: jid="{{ item.ansible_job_id }}"
      register: windows_instances
      until: windows_instances.finished
      retries: 300
      with_items: "{{ windows_jobs.results }}"

    - name: show results of windowes_instances
      debug:
        var: windows_instances.results

################### Get Passwords ###################
    - name: Windows | Obtain windows passwords for instances
      ec2_win_password:
        region: '{{ ec2_region }}'
        instance_id: "{{ windows_instances.results.0.instance_ids.0 }}"
        #instance_id: "{{ item.id }}"
        key_file: "/root/{{ aws_key_name }}-VM-private.pem"
        #key_data: "{{ create_key.key.private_key }}"  
        wait: yes
        wait_timeout: 75
      #with_items: "{{ windows_instances.results | map(attribute='tagged_instances') | list }}"
      register: ec2windows_password

    - name: show results of ec2windows_password
      debug:
        var: ec2windows_password
