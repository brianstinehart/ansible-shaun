---
- name: Deploy VM in AWS
  hosts: localhost
  vars:
    os_name: "Red Hat Enterprise Linux"
    base_vm_name: "Ansibledemo"
    ec2_vpc_id: "{{ survey_ec2_vpc_id }}"
    ec2_region: "{{ survey_ec2_region }}"
    ec2_vpc_subnet_id: "{{ survey_vpc_subnet_id }}"
    #user_count: "1"
    ec2_instance_type: "t4g.small"
    ptr_zone_cidr: "{{ survey_ptr_zone_cidr }}"
    security_group: Ansibledemo-windowssg
    aws_key_name: "AnsibleDemoKey"
  tasks:
 
 ################### Find RHEL AMI ###################
    - name: get latest AMI RHEL image
      ec2_ami_info:
        region: "{{ ec2_region }}"
        filters:
          owner-alias: amazon
          description: "Provided by Red Hat, Inc."
          architecture: "arm64"
          state: "available"
      register: AMI_image
    
    - name: show results AMI
      debug:
        var: AMI_image
  
  ################### Private key ###################
    - name: Delete Key Pair {{ aws_key_name  }}
      ec2_key:
        name: "{{ aws_key_name }}"
        region: "{{ ec2_region }}"
        state: absent
      register: remove_key
      ignore_errors: true
    
    - name: Create key pair {{ aws_key_name  }}
      ec2_key:
        name: "{{ aws_key_name }}"
        region: "{{ ec2_region }}"
      register: create_key
      
    - name: Save the private key
      copy:
        content: "{{ create_key.key.private_key }}"
        dest: "/root/{{ aws_key_name }}-VM-private.pem"
        mode: '0400'
      when: create_key.changed
      
################### Build Instances ###################      
    - name: Launch instance 1
      ec2_instance:
        key_name: "{{ aws_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ AMI_image.images.0.image_id }}"
        wait: yes
        network:
          assign_public_ip: yes
        security_group: "{{ security_group }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        region: "{{ ec2_region }}"
        tags:
          Name: "{{ base_vm_name }}"
          os_type: "{{ os_name }}"
        #user_data: "{{ lookup('template', 'win_ec2_user_data.j2', template_vars=dict(vm_name=base_vm_name )) }}"
      with_sequence: count=1
      register: launch_jobs
      async: 7200
      poll: 0
       
################### Wait for Jobs ###################
    - name: Wait for instance creation to complete
      async_status: jid="{{ item.ansible_job_id }}"
      register: vm_instances
      until: vm_instances.finished
      retries: 300
      with_items: "{{ launch_jobs.results }}"

    - name: show results of vm_instances
      debug:
        var: vm_instances.results

################### Set Facts ###################
    - name: Set VM facts for subsequent job templates
      set_stats:
        data:
          vm_key: "{{ create_key.key.private_key }}"
          vm_hostname: "{{ vm_instances.results.0.instances.0.public_dns_name }}"
          vm_name: "{{ vm_instances.results.0.instances.0.tags.Name }}"
          aws_instance: "{{ vm_instances.results.0.instances.0.instance_id }}"
