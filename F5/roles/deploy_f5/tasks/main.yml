---
############## f5 node ##############
- name: find ami for F5 BIG-IP
  ec2_ami_info:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_info.f5node.owners }}"
    filters:
      name: "{{ ec2_info.f5node.filter }}"
      architecture: "{{ ec2_info.f5node.architecture }}"
  register: amis

- name: save ami for F5
  set_fact:
    f5_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: ensure project folder {{ ec2_name_prefix }} exists
  file:
    path: "{{ playbook_dir }}/{{ ec2_name_prefix }}"
    state: directory

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  amazon.aws.ec2_key:
    name: "{{ ec2_name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    mode: '0400'
  when: create_key.changed

- name: Ensure key file has proper permissions
  file:
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem" 
    mode: 0600
  when: create_key.changed

- name: s3 bucket for persistent storage of ec2 key exists
  amazon.aws.s3_bucket:
    name: "{{ ec2_name_prefix|lower }}.private"
    state: present
    region: "{{ ec2_region }}"
    tags:
      ansible-workshops: "true"
  retries: 4
  delay: 15
  register: s3_result
  until: s3_result.failed == false

- name: Store SSH Key Pair
  amazon.aws.aws_s3:
    bucket: "{{ ec2_name_prefix|lower }}.private"
    mode: put
    object: "{{ec2_name_prefix}}-private.pem"
    src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    encrypt: true
    region: "{{ ec2_region }}"
  when: create_key.changed

- name: Save Private key from S3 Bucket when not generating it
  amazon.aws.aws_s3:
    bucket: "{{ ec2_name_prefix|lower }}.private"
    mode: get
    object: "{{ ec2_name_prefix }}-private.pem"
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    encrypt: true
    region: "{{ ec2_region }}"
  when: not create_key.changed

- name: Create instances for F5 BIG-IP node(s)
  amazon.aws.ec2_instance:
    name: "{{ ec2_name_prefix }}-F5-BIGIP"
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "sg-0d27027979ce31da6"
    instance_type: "{{ ec2_info.f5node.size }}"
    image_id: "{{ f5_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: 1
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_f5": "{{ ec2_name_prefix }}-f5"
    tags:
      short_name: "f5"
      Workshop_f5: "{{ ec2_name_prefix }}-f5"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
    wait: "{{ ec2_wait }}"
    # vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_type: "{{ ec2_info['f5node'].disk_volume_type }}"
          volume_size: "{{ ec2_info['f5node'].disk_space }}"
          iops: "{{ ec2_info['f5node'].disk_iops }}"
          throughput: "{{ ec2_info['f5node'].disk_throughput }}"
          delete_on_termination: true
  register: f5_test

- debug:
    msg: "{{ f5_test }}"

- name: grab instance ids to tag f5 node
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_f5": "{{ ec2_name_prefix }}-f5"
  register: f5_output

- name: grab facts for f5 node (workshop_type f5)
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_f5": "{{ec2_name_prefix}}-f5"
  register: f5_node_facts

- name: add f5 to groups (workshop_type f5)
  add_host:
    name: "{{ item.tags.Name }}"
    short_name: "{{ item.tags.short_name }}"
    ansible_host: "{{ item.public_ip_address }}"
    ansible_user: admin
    ansible_password: admin
    ansible_port: "{{ ssh_port }}"
    ansible_ssh_private_key_file: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
    private_ip: "{{item.private_ip_address}}"
    groups:
      - f5
  with_items: "{{ f5_node_facts.instances }}"

- name: Generate inventory
  template:
    src: "instances_f5.j2"
    dest: "{{ playbook_dir }}/{{ec2_name_prefix}}/instances.txt"

- name: Wait for BIG-IP to boot up completely
  wait_for:
    host: "{{ ansible_host }}"
    port: 8443
    state: present

- name: Set a fact named 'provider' with BIG-IP login information
  ansible.builtin.set_fact:
    provider:
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      password: "{{ admin_password }}"
      server_port: 8443
      timeout: 300
      validate_certs: "no"

- name: Change BIG-IP F5 mgmt password
  f5networks.f5_modules.bigip_command:
    provider:
      ssh_keyfile: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
      transport: cli
      user: admin
      server: "{{ ansible_host }}"
    commands: "modify auth user admin password {{ admin_password }}"
  register: change_password
  until: change_password is not failed
  retries: 5
  delay: 10

- name: Wait for API to be Ready
  f5networks.f5_modules.bigip_wait:
    timeout: 300
    provider: "{{ provider }}"
  delegate_to: localhost

- name: retrieve AS3 RPM
  include_tasks: retrieve_as3.yml

- name: install AS3 RPM
  include_tasks: install_as3.yml

- name: Set db provision.extramb
  f5networks.f5_modules.bigip_sys_db:
    key: provision.extramb
    value: "1024"
    provider: "{{ provider }}"

- name: Set db restjavad.useextramb
  f5networks.f5_modules.bigip_sys_db:
    key: restjavad.useextramb
    value: "true"
    provider: "{{ provider }}"

- name: Set db restjavad.timeout
  f5networks.f5_modules.bigip_sys_db:
    key: restjavad.timeout
    value: "180"
    provider: "{{ provider }}"

- name: Set httpd max-clients
  f5networks.f5_modules.bigip_device_httpd:
    max_clients: 20
    provider: "{{ provider }}"

- name: Save Config
  f5networks.f5_modules.bigip_config:
    save: true
    provider: "{{ provider }}"

- name: Restart REST
  f5networks.f5_modules.bigip_command:
    provider: "{{ provider }}"
    commands:
      - restart sys service restjavad
      - restart sys service restnoded
  ignore_errors: true